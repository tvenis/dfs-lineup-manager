name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Frontend build and test
  frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install dependencies
      working-directory: ./web
      run: npm install
    
    - name: Debug package.json
      working-directory: ./web
      run: |
        echo "=== Package.json contents ==="
        cat package.json
        echo "=== Available scripts ==="
        npm run
        echo "=== ESLint config ==="
        ls -la | grep eslint
        if [ -f "eslint.config.mjs" ]; then
          echo "ESLint config found"
          cat eslint.config.mjs
        else
          echo "No ESLint config found"
        fi
        echo "=== TypeScript installation ==="
        npm list typescript
        ls -la node_modules/.bin/ | grep tsc
      continue-on-error: true
    
    - name: Run type checking
      working-directory: ./web
      run: |
        echo "Running TypeScript type checking..."
        if [ -f "node_modules/.bin/tsc" ]; then
          echo "Local TypeScript found, using it..."
          ./node_modules/.bin/tsc --noEmit
        else
          echo "Local TypeScript not found, skipping..."
          exit 0
        fi
      continue-on-error: true
    
    - name: Build application
      working-directory: ./web
      run: npm run build
      env:
        NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL || 'http://localhost:8000' }}

  # Backend verification
  backend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Verify backend setup
      working-directory: ./backend
      run: |
        python -c "import fastapi; print('FastAPI imported successfully')"
        python -c "import sqlalchemy; print('SQLAlchemy imported successfully')"

  # Deploy to Vercel (only on main branch)
  deploy:
    needs: [frontend, backend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.ORG_ID }}
        vercel-project-id: ${{ secrets.PROJECT_ID }}
        working-directory: ./web
